<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-11-01T10:39:58+08:00</updated><id>/</id><title>Liang Peng</title><subtitle>Stay Hungry Stay Foolish</subtitle><entry><title>有趣的流控实现</title><link href="/rate-limit/" rel="alternate" type="text/html" title="有趣的流控实现" /><published>2016-10-30T00:00:00+08:00</published><updated>2016-10-30T00:00:00+08:00</updated><id>/rate-limit</id><content type="html" xml:base="/rate-limit/">&lt;p&gt;项目中有碰到流控的需求，之前基于令牌桶自己简单实现了一个，今天在git上找了找，原来Google的guava库中也实现了一个，看了下代码，实现思路挺有意思&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;问题描述&lt;/h2&gt;

&lt;p&gt;流控问题，结合我的需求，用一个场景来描述就是排队买面包&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;假设某面包餐厅，有N个服务员（线程），每个服务员每次只能服务一个客户（作业），餐厅的面包生产速率有限，固定为X个/秒，每个客户可以买一个或者多个面包，客户分不同的类别，每一类客户可能有一个限定的购买速率，如Xn个/秒&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;google&quot;&gt;google的实现&lt;/h2&gt;

&lt;p&gt;从形象的角度，google的实现是如下：&lt;/p&gt;

&lt;p&gt;面包分为store面包和fresh面包&lt;/p&gt;

&lt;p&gt;每个客户可以去到服务员那里，说出他想要的面包数，如果：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
1. 当store面包数（每次计算当前时间 - 上次时间应该生产的面包数），大于需要的数量，直接给客户
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
2. 当store面包数不够，则按照速率X，计算出需要等待多少时间，让当前用户等待（sleep），其他服务员，在当前等待的基础上，再进行等待
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt; ：节省资源&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt; ：利用率不足，且无法合理满足分类客户的速率&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;简单实现&lt;/h2&gt;

&lt;p&gt;简单实现思路如下：&lt;/p&gt;

&lt;p&gt;只有一个store面包数，后台有个线程按照指定速率增加面包数量&lt;/p&gt;

&lt;p&gt;每个客户可以去服务员哪里，说出他想要的面包树，如果&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
1. 当store面包数，大于需要的数量，直接给客户
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
2. 当store面包数不够，直接告诉客户面包不够，客户再问一次，或者，服务下一个
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt; ：实现简单，实时性好，容易实现分类客户的速率控制&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt; ：频繁请求资源浪费，线程无用功多&lt;/p&gt;</content><summary>项目中有碰到流控的需求，之前基于令牌桶自己简单实现了一个，今天在git上找了找，原来Google的guava库中也实现了一个，看了下代码，实现思路挺有意思</summary></entry><entry><title>蛋疼的Mac升级导致的应用启动问题</title><link href="/mac-write-issue/" rel="alternate" type="text/html" title="蛋疼的Mac升级导致的应用启动问题" /><published>2016-10-15T00:00:00+08:00</published><updated>2016-10-15T00:00:00+08:00</updated><id>/mac-write-issue</id><content type="html" xml:base="/mac-write-issue/">&lt;p&gt;一直以为mac体验无敌，但是这次蛋疼的问题让我回归了理性。。。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;问题&lt;/h2&gt;

&lt;p&gt;闲暇时候会玩玩dota2，有了imac以后，就迁移到mac上，今天开机后突然就无法进入Dota，报错：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;only one instance of the game can be running at one time&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;程序员本能 - 杀进程&lt;/h2&gt;

&lt;p&gt;本着程序员的本能，这应该是已经有进程在运行吧，打开终端，打开任务监控器，杀掉Dota2相关的进程&lt;/p&gt;

&lt;p&gt;然而并没有卵用&lt;/p&gt;

&lt;p&gt;反倒是发现每次启动报错后，Dota2会新建一个进程上报本次错误。。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;重装游戏&lt;/h2&gt;

&lt;p&gt;开始进入百度、Google，有大神说重装一下steam就好了，于是直接重新安装11G的程序。。。&lt;/p&gt;

&lt;p&gt;然而并没有卵用&lt;/p&gt;

&lt;p&gt;问题依旧。。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;修复系统&lt;/h2&gt;

&lt;p&gt;灵光一现，开机的时候有一个报出一个错误，会不会和这个错误有关呢&lt;/p&gt;

&lt;p&gt;重启机器，截图查看错误信息，发现是/tmp目录没有写权限&lt;/p&gt;

&lt;p&gt;想到经常用/tmp目录来保存检查进程存在的临时文件，貌似找到了原因&lt;/p&gt;

&lt;p&gt;Google写权限问题，找到修复方法&lt;/p&gt;

&lt;p&gt;重启Dota2，成功 ：）&lt;/p&gt;</content><summary>一直以为mac体验无敌，但是这次蛋疼的问题让我回归了理性。。。</summary></entry><entry><title>You’re up and running!</title><link href="/Hello-World/" rel="alternate" type="text/html" title="You're up and running!" /><published>2014-03-03T00:00:00+08:00</published><updated>2014-03-03T00:00:00+08:00</updated><id>/Hello-World</id><content type="html" xml:base="/Hello-World/">&lt;p&gt;Next you can update your site name, avatar and other options using the _config.yml file in the root of your repository (shown below).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/config.png&quot; alt=&quot;_config.yml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to make your first post is to edit this one. Go into /_posts/ and update the Hello World markdown file. For more instructions head over to the &lt;a href=&quot;https://github.com/barryclark/jekyll-now&quot;&gt;Jekyll Now repository&lt;/a&gt; on GitHub.&lt;/p&gt;</content><summary>Next you can update your site name, avatar and other options using the _config.yml file in the root of your repository (shown below).</summary></entry></feed>
